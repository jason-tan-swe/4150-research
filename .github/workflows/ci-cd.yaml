name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  build-order-service:
    name: Build Order Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Start Timer
        run: echo "$(date +%s%3N)" > start-time.txt

      - name: Set up Docker Layer Cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: docker-layer-cache-${{ runner.os }}
          restore-keys: |
            docker-layer-cache-

      - name: Build Docker Image with Cache
        run: |
          docker build \
          --cache-from=type=local,src=/tmp/.buildx-cache \
          --cache-to=type=local,dest=/tmp/.buildx-cache \
          -t order-service ./services/order-service

      - name: Tag Docker Image
        run: docker tag order-service research4150.azurecr.io/order-service:latest

      - name: Login to Azure Container Registry
        run: echo "${{ secrets.ACR_PASSWORD }}" | docker login research4150.azurecr.io -u research4150 --password-stdin

      - name: Push Docker Image to ACR
        run: docker push research4150.azurecr.io/order-service:latest

      - name: End Timer and Calculate Duration
        run: |
          START=$(cat start-time.txt)
          END=$(date +%s%3N)
          DURATION=$(echo "scale=3; ($END - $START) / 1000" | bc)
          echo "Build Order Service Duration: $DURATION seconds" > job-duration.txt

      - name: Upload Timing Logs
        uses: actions/upload-artifact@v4
        with:
          name: build-order-service-timing
          path: job-duration.txt

  build-product-service:
    name: Build Product Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Start Timer
        run: echo "$(date +%s%3N)" > start-time.txt

      - name: Set up Docker Layer Cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: docker-layer-cache-${{ runner.os }}
          restore-keys: |
            docker-layer-cache-

      - name: Build Docker Image with Cache
        run: |
          docker build \
          --cache-from=type=local,src=/tmp/.buildx-cache \
          --cache-to=type=local,dest=/tmp/.buildx-cache \
          -t product-service ./services/product-service

      - name: Tag Docker Image
        run: docker tag product-service research4150.azurecr.io/product-service:latest

      - name: Login to Azure Container Registry
        run: echo "${{ secrets.ACR_PASSWORD }}" | docker login research4150.azurecr.io -u research4150 --password-stdin

      - name: Push Docker Image to ACR
        run: docker push research4150.azurecr.io/product-service:latest

      - name: End Timer and Calculate Duration
        run: |
          START=$(cat start-time.txt)
          END=$(date +%s%3N)
          DURATION=$(echo "scale=3; ($END - $START) / 1000" | bc)
          echo "Build Product Service Duration: $DURATION seconds" > job-duration.txt

      - name: Upload Timing Logs
        uses: actions/upload-artifact@v4
        with:
          name: build-product-service-timing
          path: job-duration.txt

  build-user-service:
    name: Build User Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Start Timer
        run: echo "$(date +%s%3N)" > start-time.txt

      - name: Set up Docker Layer Cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: docker-layer-cache-${{ runner.os }}
          restore-keys: |
            docker-layer-cache-

      - name: Build Docker Image with Cache
        run: |
          docker build \
          --cache-from=type=local,src=/tmp/.buildx-cache \
          --cache-to=type=local,dest=/tmp/.buildx-cache \
          -t user-service ./services/user-service

      - name: Tag Docker Image
        run: docker tag user-service research4150.azurecr.io/user-service:latest

      - name: Login to Azure Container Registry
        run: echo "${{ secrets.ACR_PASSWORD }}" | docker login research4150.azurecr.io -u research4150 --password-stdin

      - name: Push Docker Image to ACR
        run: docker push research4150.azurecr.io/user-service:latest

      - name: End Timer and Calculate Duration
        run: |
          START=$(cat start-time.txt)
          END=$(date +%s%3N)
          DURATION=$(echo "scale=3; ($END - $START) / 1000" | bc)
          echo "Build User Service Duration: $DURATION seconds" > job-duration.txt

      - name: Upload Timing Logs
        uses: actions/upload-artifact@v4
        with:
          name: build-user-service-timing
          path: job-duration.txt

  test-order-service:
    name: Test Order Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Start Timer
        run: echo "$(date +%s%3N)" > start-time.txt

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Cache pnpm Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: pnpm-${{ runner.os }}-${{ hashFiles('services/order-service/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install Dependencies
        run: |
          cd ./services/order-service
          pnpm install

      - name: Run Tests
        run: |
          cd ./services/order-service
          pnpm jest --testPathPattern=__tests__

      - name: End Timer and Calculate Duration
        run: |
          START=$(cat start-time.txt)
          END=$(date +%s%3N)
          DURATION=$(echo "scale=3; ($END - $START) / 1000" | bc)
          echo "Test Order Service Duration: $DURATION seconds" > job-duration.txt

      - name: Upload Timing Logs
        uses: actions/upload-artifact@v4
        with:
          name: test-order-service-timing
          path: job-duration.txt

  test-product-service:
    name: Test Product Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Start Timer
        run: echo "$(date +%s%3N)" > start-time.txt

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Cache pnpm Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: pnpm-${{ runner.os }}-${{ hashFiles('services/product-service/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install Dependencies
        run: |
          cd ./services/product-service
          pnpm install

      - name: Run Tests
        run: |
          cd ./services/product-service
          pnpm jest --testPathPattern=__tests__

      - name: End Timer and Calculate Duration
        run: |
          START=$(cat start-time.txt)
          END=$(date +%s%3N)
          DURATION=$(echo "scale=3; ($END - $START) / 1000" | bc)
          echo "Test Product Service Duration: $DURATION seconds" > job-duration.txt

      - name: Upload Timing Logs
        uses: actions/upload-artifact@v4
        with:
          name: test-product-service-timing
          path: job-duration.txt

  test-user-service:
    name: Test User Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Start Timer
        run: echo "$(date +%s%3N)" > start-time.txt

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Cache pnpm Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: pnpm-${{ runner.os }}-${{ hashFiles('services/user-service/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install Dependencies
        run: |
          cd ./services/user-service
          pnpm install

      - name: Run Tests
        run: |
          cd ./services/user-service
          pnpm jest --testPathPattern=__tests__

      - name: End Timer and Calculate Duration
        run: |
          START=$(cat start-time.txt)
          END=$(date +%s%3N)
          DURATION=$(echo "scale=3; ($END - $START) / 1000" | bc)
          echo "Test User Service Duration: $DURATION seconds" > job-duration.txt

      - name: Upload Timing Logs
        uses: actions/upload-artifact@v4
        with:
          name: test-user-service-timing
          path: job-duration.txt

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [build-order-service, build-product-service, build-user-service, test-order-service, test-product-service, test-user-service]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Start Timer
        run: echo "$(date +%s%3N)" > start-time.txt

      - name: Authenticate with Azure
        uses: azure/login@v2.2.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set up AKS credentials
        run: az aks get-credentials --resource-group aks-research-cluster_group --name aks-research-cluster

      - name: Deploy Services
        run: |
          kubectl apply -f k8s/persistent-volumes/user-service-pvc.yml
          kubectl apply -f k8s/persistent-volumes/product-service-pvc.yml
          kubectl apply -f k8s/persistent-volumes/order-service-pvc.yml
          kubectl apply -f k8s/deployments/user-service-deployment.yml
          kubectl apply -f k8s/deployments/product-service-deployment.yml
          kubectl apply -f k8s/deployments/order-service-deployment.yml
          kubectl apply -f k8s/services/user-service-service.yml
          kubectl apply -f k8s/services/product-service-service.yml
          kubectl apply -f k8s/services/order-service-service.yml
          kubectl apply -f k8s/ingress.yml

      - name: End Timer and Calculate Duration
        run: |
          START=$(cat start-time.txt)
          END=$(date +%s%3N)
          DURATION=$(echo "scale=3; ($END - $START) / 1000" | bc)
          echo "Deploy Duration: $DURATION seconds" > job-duration.txt

      - name: Upload Timing Logs
        uses: actions/upload-artifact@v4
        with:
          name: deploy-timing
          path: job-duration.txt

  test-e2e:
    name: Run End-to-End Tests
    runs-on: ubuntu-latest
    needs: [deploy]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Start Timer
        run: echo "$(date +%s%3N)" > start-time.txt

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install Dependencies
        run: pnpm install

      - name: Run E2E Tests
        run: pnpm jest tests/e2e/ --verbose
        env:
          BASE_URL: http://4.227.46.180 # change to ingress

      - name: End Timer and Calculate Duration
        run: |
          START=$(cat start-time.txt)
          END=$(date +%s%3N)
          DURATION=$(echo "scale=3; ($END - $START) / 1000" | bc)
          echo "Test E2E Duration: $DURATION seconds" > job-duration.txt

      - name: Upload Timing Logs
        uses: actions/upload-artifact@v4
        with:
          name: test-e2e-timing
          path: job-duration.txt